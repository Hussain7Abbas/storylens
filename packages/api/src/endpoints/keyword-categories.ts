/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elysia Documentation
 * Development documentation
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  DeleteKeywordCategoriesById200,
  DeleteKeywordCategoriesById404,
  DeleteKeywordCategoriesById500,
  GetKeywordCategories200,
  GetKeywordCategories404,
  GetKeywordCategories500,
  GetKeywordCategoriesById200,
  GetKeywordCategoriesById404,
  GetKeywordCategoriesById500,
  GetKeywordCategoriesParams,
  PostKeywordCategories200,
  PostKeywordCategories404,
  PostKeywordCategories500,
  PostKeywordCategoriesBodyOne,
  PostKeywordCategoriesBodyThree,
  PostKeywordCategoriesBodyTwo,
  PutKeywordCategoriesById200,
  PutKeywordCategoriesById404,
  PutKeywordCategoriesById500,
  PutKeywordCategoriesByIdBodyOne,
  PutKeywordCategoriesByIdBodyThree,
  PutKeywordCategoriesByIdBodyTwo,
} from '../schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getKeywordCategories = (
  params: GetKeywordCategoriesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetKeywordCategories200>> => {
  return axios.get('http://localhost:7000/keyword-categories/', {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetKeywordCategoriesQueryKey = (
  params?: GetKeywordCategoriesParams,
) => {
  return [
    'http://localhost:7000/keyword-categories/',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetKeywordCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getKeywordCategories>>,
  TError = AxiosError<GetKeywordCategories404 | GetKeywordCategories500>,
>(
  params: GetKeywordCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordCategories>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetKeywordCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getKeywordCategories>>> = ({
    signal,
  }) => getKeywordCategories(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getKeywordCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetKeywordCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKeywordCategories>>
>;
export type GetKeywordCategoriesQueryError = AxiosError<
  GetKeywordCategories404 | GetKeywordCategories500
>;

export function useGetKeywordCategories<
  TData = Awaited<ReturnType<typeof getKeywordCategories>>,
  TError = AxiosError<GetKeywordCategories404 | GetKeywordCategories500>,
>(
  params: GetKeywordCategoriesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordCategories>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordCategories>>,
          TError,
          Awaited<ReturnType<typeof getKeywordCategories>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKeywordCategories<
  TData = Awaited<ReturnType<typeof getKeywordCategories>>,
  TError = AxiosError<GetKeywordCategories404 | GetKeywordCategories500>,
>(
  params: GetKeywordCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordCategories>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordCategories>>,
          TError,
          Awaited<ReturnType<typeof getKeywordCategories>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetKeywordCategories<
  TData = Awaited<ReturnType<typeof getKeywordCategories>>,
  TError = AxiosError<GetKeywordCategories404 | GetKeywordCategories500>,
>(
  params: GetKeywordCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordCategories>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetKeywordCategories<
  TData = Awaited<ReturnType<typeof getKeywordCategories>>,
  TError = AxiosError<GetKeywordCategories404 | GetKeywordCategories500>,
>(
  params: GetKeywordCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordCategories>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetKeywordCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postKeywordCategories = (
  postKeywordCategoriesBody:
    | PostKeywordCategoriesBodyOne
    | PostKeywordCategoriesBodyTwo
    | PostKeywordCategoriesBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostKeywordCategories200>> => {
  return axios.post(
    'http://localhost:7000/keyword-categories/',
    postKeywordCategoriesBody,
    options,
  );
};

export const getPostKeywordCategoriesMutationOptions = <
  TError = AxiosError<PostKeywordCategories404 | PostKeywordCategories500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postKeywordCategories>>,
    TError,
    {
      data:
        | PostKeywordCategoriesBodyOne
        | PostKeywordCategoriesBodyTwo
        | PostKeywordCategoriesBodyThree;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postKeywordCategories>>,
  TError,
  {
    data:
      | PostKeywordCategoriesBodyOne
      | PostKeywordCategoriesBodyTwo
      | PostKeywordCategoriesBodyThree;
  },
  TContext
> => {
  const mutationKey = ['postKeywordCategories'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postKeywordCategories>>,
    {
      data:
        | PostKeywordCategoriesBodyOne
        | PostKeywordCategoriesBodyTwo
        | PostKeywordCategoriesBodyThree;
    }
  > = (props) => {
    const { data } = props ?? {};

    return postKeywordCategories(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostKeywordCategoriesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postKeywordCategories>>
>;
export type PostKeywordCategoriesMutationBody =
  | PostKeywordCategoriesBodyOne
  | PostKeywordCategoriesBodyTwo
  | PostKeywordCategoriesBodyThree;
export type PostKeywordCategoriesMutationError = AxiosError<
  PostKeywordCategories404 | PostKeywordCategories500
>;

export const usePostKeywordCategories = <
  TError = AxiosError<PostKeywordCategories404 | PostKeywordCategories500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postKeywordCategories>>,
      TError,
      {
        data:
          | PostKeywordCategoriesBodyOne
          | PostKeywordCategoriesBodyTwo
          | PostKeywordCategoriesBodyThree;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postKeywordCategories>>,
  TError,
  {
    data:
      | PostKeywordCategoriesBodyOne
      | PostKeywordCategoriesBodyTwo
      | PostKeywordCategoriesBodyThree;
  },
  TContext
> => {
  const mutationOptions = getPostKeywordCategoriesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getKeywordCategoriesById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetKeywordCategoriesById200>> => {
  return axios.get(`http://localhost:7000/keyword-categories/${id}`, options);
};

export const getGetKeywordCategoriesByIdQueryKey = (id?: string) => {
  return [`http://localhost:7000/keyword-categories/${id}`] as const;
};

export const getGetKeywordCategoriesByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getKeywordCategoriesById>>,
  TError = AxiosError<GetKeywordCategoriesById404 | GetKeywordCategoriesById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordCategoriesById>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetKeywordCategoriesByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getKeywordCategoriesById>>
  > = ({ signal }) => getKeywordCategoriesById(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getKeywordCategoriesById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetKeywordCategoriesByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKeywordCategoriesById>>
>;
export type GetKeywordCategoriesByIdQueryError = AxiosError<
  GetKeywordCategoriesById404 | GetKeywordCategoriesById500
>;

export function useGetKeywordCategoriesById<
  TData = Awaited<ReturnType<typeof getKeywordCategoriesById>>,
  TError = AxiosError<GetKeywordCategoriesById404 | GetKeywordCategoriesById500>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordCategoriesById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordCategoriesById>>,
          TError,
          Awaited<ReturnType<typeof getKeywordCategoriesById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKeywordCategoriesById<
  TData = Awaited<ReturnType<typeof getKeywordCategoriesById>>,
  TError = AxiosError<GetKeywordCategoriesById404 | GetKeywordCategoriesById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordCategoriesById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordCategoriesById>>,
          TError,
          Awaited<ReturnType<typeof getKeywordCategoriesById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetKeywordCategoriesById<
  TData = Awaited<ReturnType<typeof getKeywordCategoriesById>>,
  TError = AxiosError<GetKeywordCategoriesById404 | GetKeywordCategoriesById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordCategoriesById>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetKeywordCategoriesById<
  TData = Awaited<ReturnType<typeof getKeywordCategoriesById>>,
  TError = AxiosError<GetKeywordCategoriesById404 | GetKeywordCategoriesById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordCategoriesById>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetKeywordCategoriesByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putKeywordCategoriesById = (
  id: string,
  putKeywordCategoriesByIdBody:
    | PutKeywordCategoriesByIdBodyOne
    | PutKeywordCategoriesByIdBodyTwo
    | PutKeywordCategoriesByIdBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PutKeywordCategoriesById200>> => {
  return axios.put(
    `http://localhost:7000/keyword-categories/${id}`,
    putKeywordCategoriesByIdBody,
    options,
  );
};

export const getPutKeywordCategoriesByIdMutationOptions = <
  TError = AxiosError<PutKeywordCategoriesById404 | PutKeywordCategoriesById500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putKeywordCategoriesById>>,
    TError,
    {
      id: string;
      data:
        | PutKeywordCategoriesByIdBodyOne
        | PutKeywordCategoriesByIdBodyTwo
        | PutKeywordCategoriesByIdBodyThree;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putKeywordCategoriesById>>,
  TError,
  {
    id: string;
    data:
      | PutKeywordCategoriesByIdBodyOne
      | PutKeywordCategoriesByIdBodyTwo
      | PutKeywordCategoriesByIdBodyThree;
  },
  TContext
> => {
  const mutationKey = ['putKeywordCategoriesById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putKeywordCategoriesById>>,
    {
      id: string;
      data:
        | PutKeywordCategoriesByIdBodyOne
        | PutKeywordCategoriesByIdBodyTwo
        | PutKeywordCategoriesByIdBodyThree;
    }
  > = (props) => {
    const { id, data } = props ?? {};

    return putKeywordCategoriesById(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutKeywordCategoriesByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putKeywordCategoriesById>>
>;
export type PutKeywordCategoriesByIdMutationBody =
  | PutKeywordCategoriesByIdBodyOne
  | PutKeywordCategoriesByIdBodyTwo
  | PutKeywordCategoriesByIdBodyThree;
export type PutKeywordCategoriesByIdMutationError = AxiosError<
  PutKeywordCategoriesById404 | PutKeywordCategoriesById500
>;

export const usePutKeywordCategoriesById = <
  TError = AxiosError<PutKeywordCategoriesById404 | PutKeywordCategoriesById500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putKeywordCategoriesById>>,
      TError,
      {
        id: string;
        data:
          | PutKeywordCategoriesByIdBodyOne
          | PutKeywordCategoriesByIdBodyTwo
          | PutKeywordCategoriesByIdBodyThree;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putKeywordCategoriesById>>,
  TError,
  {
    id: string;
    data:
      | PutKeywordCategoriesByIdBodyOne
      | PutKeywordCategoriesByIdBodyTwo
      | PutKeywordCategoriesByIdBodyThree;
  },
  TContext
> => {
  const mutationOptions = getPutKeywordCategoriesByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteKeywordCategoriesById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DeleteKeywordCategoriesById200>> => {
  return axios.delete(`http://localhost:7000/keyword-categories/${id}`, options);
};

export const getDeleteKeywordCategoriesByIdMutationOptions = <
  TError = AxiosError<
    DeleteKeywordCategoriesById404 | DeleteKeywordCategoriesById500
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteKeywordCategoriesById>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteKeywordCategoriesById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteKeywordCategoriesById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteKeywordCategoriesById>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteKeywordCategoriesById(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteKeywordCategoriesByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteKeywordCategoriesById>>
>;

export type DeleteKeywordCategoriesByIdMutationError = AxiosError<
  DeleteKeywordCategoriesById404 | DeleteKeywordCategoriesById500
>;

export const useDeleteKeywordCategoriesById = <
  TError = AxiosError<
    DeleteKeywordCategoriesById404 | DeleteKeywordCategoriesById500
  >,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteKeywordCategoriesById>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteKeywordCategoriesById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteKeywordCategoriesByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
