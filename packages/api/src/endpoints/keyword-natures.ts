/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elysia Documentation
 * Development documentation
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  DeleteKeywordNaturesById200,
  DeleteKeywordNaturesById404,
  DeleteKeywordNaturesById500,
  GetKeywordNatures200,
  GetKeywordNatures404,
  GetKeywordNatures500,
  GetKeywordNaturesById200,
  GetKeywordNaturesById404,
  GetKeywordNaturesById500,
  GetKeywordNaturesParams,
  PostKeywordNatures200,
  PostKeywordNatures404,
  PostKeywordNatures500,
  PostKeywordNaturesBodyOne,
  PostKeywordNaturesBodyThree,
  PostKeywordNaturesBodyTwo,
  PutKeywordNaturesById200,
  PutKeywordNaturesById404,
  PutKeywordNaturesById500,
  PutKeywordNaturesByIdBodyOne,
  PutKeywordNaturesByIdBodyThree,
  PutKeywordNaturesByIdBodyTwo,
} from '../schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getKeywordNatures = (
  params: GetKeywordNaturesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetKeywordNatures200>> => {
  return axios.get('http://localhost:7000/keyword-natures/', {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetKeywordNaturesQueryKey = (params?: GetKeywordNaturesParams) => {
  return [
    'http://localhost:7000/keyword-natures/',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetKeywordNaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getKeywordNatures>>,
  TError = AxiosError<GetKeywordNatures404 | GetKeywordNatures500>,
>(
  params: GetKeywordNaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordNatures>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetKeywordNaturesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getKeywordNatures>>> = ({
    signal,
  }) => getKeywordNatures(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getKeywordNatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetKeywordNaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKeywordNatures>>
>;
export type GetKeywordNaturesQueryError = AxiosError<
  GetKeywordNatures404 | GetKeywordNatures500
>;

export function useGetKeywordNatures<
  TData = Awaited<ReturnType<typeof getKeywordNatures>>,
  TError = AxiosError<GetKeywordNatures404 | GetKeywordNatures500>,
>(
  params: GetKeywordNaturesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordNatures>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordNatures>>,
          TError,
          Awaited<ReturnType<typeof getKeywordNatures>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKeywordNatures<
  TData = Awaited<ReturnType<typeof getKeywordNatures>>,
  TError = AxiosError<GetKeywordNatures404 | GetKeywordNatures500>,
>(
  params: GetKeywordNaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordNatures>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordNatures>>,
          TError,
          Awaited<ReturnType<typeof getKeywordNatures>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetKeywordNatures<
  TData = Awaited<ReturnType<typeof getKeywordNatures>>,
  TError = AxiosError<GetKeywordNatures404 | GetKeywordNatures500>,
>(
  params: GetKeywordNaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordNatures>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetKeywordNatures<
  TData = Awaited<ReturnType<typeof getKeywordNatures>>,
  TError = AxiosError<GetKeywordNatures404 | GetKeywordNatures500>,
>(
  params: GetKeywordNaturesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordNatures>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetKeywordNaturesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postKeywordNatures = (
  postKeywordNaturesBody:
    | PostKeywordNaturesBodyOne
    | PostKeywordNaturesBodyTwo
    | PostKeywordNaturesBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostKeywordNatures200>> => {
  return axios.post(
    'http://localhost:7000/keyword-natures/',
    postKeywordNaturesBody,
    options,
  );
};

export const getPostKeywordNaturesMutationOptions = <
  TError = AxiosError<PostKeywordNatures404 | PostKeywordNatures500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postKeywordNatures>>,
    TError,
    {
      data:
        | PostKeywordNaturesBodyOne
        | PostKeywordNaturesBodyTwo
        | PostKeywordNaturesBodyThree;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postKeywordNatures>>,
  TError,
  {
    data:
      | PostKeywordNaturesBodyOne
      | PostKeywordNaturesBodyTwo
      | PostKeywordNaturesBodyThree;
  },
  TContext
> => {
  const mutationKey = ['postKeywordNatures'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postKeywordNatures>>,
    {
      data:
        | PostKeywordNaturesBodyOne
        | PostKeywordNaturesBodyTwo
        | PostKeywordNaturesBodyThree;
    }
  > = (props) => {
    const { data } = props ?? {};

    return postKeywordNatures(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostKeywordNaturesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postKeywordNatures>>
>;
export type PostKeywordNaturesMutationBody =
  | PostKeywordNaturesBodyOne
  | PostKeywordNaturesBodyTwo
  | PostKeywordNaturesBodyThree;
export type PostKeywordNaturesMutationError = AxiosError<
  PostKeywordNatures404 | PostKeywordNatures500
>;

export const usePostKeywordNatures = <
  TError = AxiosError<PostKeywordNatures404 | PostKeywordNatures500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postKeywordNatures>>,
      TError,
      {
        data:
          | PostKeywordNaturesBodyOne
          | PostKeywordNaturesBodyTwo
          | PostKeywordNaturesBodyThree;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postKeywordNatures>>,
  TError,
  {
    data:
      | PostKeywordNaturesBodyOne
      | PostKeywordNaturesBodyTwo
      | PostKeywordNaturesBodyThree;
  },
  TContext
> => {
  const mutationOptions = getPostKeywordNaturesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getKeywordNaturesById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetKeywordNaturesById200>> => {
  return axios.get(`http://localhost:7000/keyword-natures/${id}`, options);
};

export const getGetKeywordNaturesByIdQueryKey = (id?: string) => {
  return [`http://localhost:7000/keyword-natures/${id}`] as const;
};

export const getGetKeywordNaturesByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getKeywordNaturesById>>,
  TError = AxiosError<GetKeywordNaturesById404 | GetKeywordNaturesById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordNaturesById>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetKeywordNaturesByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getKeywordNaturesById>>> = ({
    signal,
  }) => getKeywordNaturesById(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getKeywordNaturesById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetKeywordNaturesByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKeywordNaturesById>>
>;
export type GetKeywordNaturesByIdQueryError = AxiosError<
  GetKeywordNaturesById404 | GetKeywordNaturesById500
>;

export function useGetKeywordNaturesById<
  TData = Awaited<ReturnType<typeof getKeywordNaturesById>>,
  TError = AxiosError<GetKeywordNaturesById404 | GetKeywordNaturesById500>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordNaturesById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordNaturesById>>,
          TError,
          Awaited<ReturnType<typeof getKeywordNaturesById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKeywordNaturesById<
  TData = Awaited<ReturnType<typeof getKeywordNaturesById>>,
  TError = AxiosError<GetKeywordNaturesById404 | GetKeywordNaturesById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordNaturesById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordNaturesById>>,
          TError,
          Awaited<ReturnType<typeof getKeywordNaturesById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetKeywordNaturesById<
  TData = Awaited<ReturnType<typeof getKeywordNaturesById>>,
  TError = AxiosError<GetKeywordNaturesById404 | GetKeywordNaturesById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordNaturesById>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetKeywordNaturesById<
  TData = Awaited<ReturnType<typeof getKeywordNaturesById>>,
  TError = AxiosError<GetKeywordNaturesById404 | GetKeywordNaturesById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordNaturesById>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetKeywordNaturesByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putKeywordNaturesById = (
  id: string,
  putKeywordNaturesByIdBody:
    | PutKeywordNaturesByIdBodyOne
    | PutKeywordNaturesByIdBodyTwo
    | PutKeywordNaturesByIdBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PutKeywordNaturesById200>> => {
  return axios.put(
    `http://localhost:7000/keyword-natures/${id}`,
    putKeywordNaturesByIdBody,
    options,
  );
};

export const getPutKeywordNaturesByIdMutationOptions = <
  TError = AxiosError<PutKeywordNaturesById404 | PutKeywordNaturesById500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putKeywordNaturesById>>,
    TError,
    {
      id: string;
      data:
        | PutKeywordNaturesByIdBodyOne
        | PutKeywordNaturesByIdBodyTwo
        | PutKeywordNaturesByIdBodyThree;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putKeywordNaturesById>>,
  TError,
  {
    id: string;
    data:
      | PutKeywordNaturesByIdBodyOne
      | PutKeywordNaturesByIdBodyTwo
      | PutKeywordNaturesByIdBodyThree;
  },
  TContext
> => {
  const mutationKey = ['putKeywordNaturesById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putKeywordNaturesById>>,
    {
      id: string;
      data:
        | PutKeywordNaturesByIdBodyOne
        | PutKeywordNaturesByIdBodyTwo
        | PutKeywordNaturesByIdBodyThree;
    }
  > = (props) => {
    const { id, data } = props ?? {};

    return putKeywordNaturesById(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutKeywordNaturesByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putKeywordNaturesById>>
>;
export type PutKeywordNaturesByIdMutationBody =
  | PutKeywordNaturesByIdBodyOne
  | PutKeywordNaturesByIdBodyTwo
  | PutKeywordNaturesByIdBodyThree;
export type PutKeywordNaturesByIdMutationError = AxiosError<
  PutKeywordNaturesById404 | PutKeywordNaturesById500
>;

export const usePutKeywordNaturesById = <
  TError = AxiosError<PutKeywordNaturesById404 | PutKeywordNaturesById500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putKeywordNaturesById>>,
      TError,
      {
        id: string;
        data:
          | PutKeywordNaturesByIdBodyOne
          | PutKeywordNaturesByIdBodyTwo
          | PutKeywordNaturesByIdBodyThree;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putKeywordNaturesById>>,
  TError,
  {
    id: string;
    data:
      | PutKeywordNaturesByIdBodyOne
      | PutKeywordNaturesByIdBodyTwo
      | PutKeywordNaturesByIdBodyThree;
  },
  TContext
> => {
  const mutationOptions = getPutKeywordNaturesByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteKeywordNaturesById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DeleteKeywordNaturesById200>> => {
  return axios.delete(`http://localhost:7000/keyword-natures/${id}`, options);
};

export const getDeleteKeywordNaturesByIdMutationOptions = <
  TError = AxiosError<DeleteKeywordNaturesById404 | DeleteKeywordNaturesById500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteKeywordNaturesById>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteKeywordNaturesById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteKeywordNaturesById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteKeywordNaturesById>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteKeywordNaturesById(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteKeywordNaturesByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteKeywordNaturesById>>
>;

export type DeleteKeywordNaturesByIdMutationError = AxiosError<
  DeleteKeywordNaturesById404 | DeleteKeywordNaturesById500
>;

export const useDeleteKeywordNaturesById = <
  TError = AxiosError<DeleteKeywordNaturesById404 | DeleteKeywordNaturesById500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteKeywordNaturesById>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteKeywordNaturesById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteKeywordNaturesByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
