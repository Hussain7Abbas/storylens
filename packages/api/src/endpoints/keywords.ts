/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elysia Documentation
 * Development documentation
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  GetKeywordsParams,
  PostKeywordsBodyOne,
  PostKeywordsBodyThree,
  PostKeywordsBodyTwo,
  PutKeywordsByIdBodyOne,
  PutKeywordsByIdBodyThree,
  PutKeywordsByIdBodyTwo,
} from '../schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getKeywords = (
  params: GetKeywordsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get('http://localhost:7000/keywords/', {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetKeywordsQueryKey = (params?: GetKeywordsParams) => {
  return ['http://localhost:7000/keywords/', ...(params ? [params] : [])] as const;
};

export const getGetKeywordsQueryOptions = <
  TData = Awaited<ReturnType<typeof getKeywords>>,
  TError = AxiosError<unknown>,
>(
  params: GetKeywordsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywords>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetKeywordsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getKeywords>>> = ({
    signal,
  }) => getKeywords(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getKeywords>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetKeywordsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKeywords>>
>;
export type GetKeywordsQueryError = AxiosError<unknown>;

export function useGetKeywords<
  TData = Awaited<ReturnType<typeof getKeywords>>,
  TError = AxiosError<unknown>,
>(
  params: GetKeywordsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywords>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywords>>,
          TError,
          Awaited<ReturnType<typeof getKeywords>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKeywords<
  TData = Awaited<ReturnType<typeof getKeywords>>,
  TError = AxiosError<unknown>,
>(
  params: GetKeywordsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywords>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywords>>,
          TError,
          Awaited<ReturnType<typeof getKeywords>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetKeywords<
  TData = Awaited<ReturnType<typeof getKeywords>>,
  TError = AxiosError<unknown>,
>(
  params: GetKeywordsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywords>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetKeywords<
  TData = Awaited<ReturnType<typeof getKeywords>>,
  TError = AxiosError<unknown>,
>(
  params: GetKeywordsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywords>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetKeywordsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postKeywords = (
  postKeywordsBody: PostKeywordsBodyOne | PostKeywordsBodyTwo | PostKeywordsBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post('http://localhost:7000/keywords/', postKeywordsBody, options);
};

export const getPostKeywordsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postKeywords>>,
    TError,
    { data: PostKeywordsBodyOne | PostKeywordsBodyTwo | PostKeywordsBodyThree },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postKeywords>>,
  TError,
  { data: PostKeywordsBodyOne | PostKeywordsBodyTwo | PostKeywordsBodyThree },
  TContext
> => {
  const mutationKey = ['postKeywords'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postKeywords>>,
    { data: PostKeywordsBodyOne | PostKeywordsBodyTwo | PostKeywordsBodyThree }
  > = (props) => {
    const { data } = props ?? {};

    return postKeywords(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostKeywordsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postKeywords>>
>;
export type PostKeywordsMutationBody =
  | PostKeywordsBodyOne
  | PostKeywordsBodyTwo
  | PostKeywordsBodyThree;
export type PostKeywordsMutationError = AxiosError<unknown>;

export const usePostKeywords = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postKeywords>>,
      TError,
      { data: PostKeywordsBodyOne | PostKeywordsBodyTwo | PostKeywordsBodyThree },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postKeywords>>,
  TError,
  { data: PostKeywordsBodyOne | PostKeywordsBodyTwo | PostKeywordsBodyThree },
  TContext
> => {
  const mutationOptions = getPostKeywordsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getKeywordsById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`http://localhost:7000/keywords/${id}`, options);
};

export const getGetKeywordsByIdQueryKey = (id?: string) => {
  return [`http://localhost:7000/keywords/${id}`] as const;
};

export const getGetKeywordsByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getKeywordsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordsById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetKeywordsByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getKeywordsById>>> = ({
    signal,
  }) => getKeywordsById(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getKeywordsById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetKeywordsByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKeywordsById>>
>;
export type GetKeywordsByIdQueryError = AxiosError<unknown>;

export function useGetKeywordsById<
  TData = Awaited<ReturnType<typeof getKeywordsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordsById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordsById>>,
          TError,
          Awaited<ReturnType<typeof getKeywordsById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKeywordsById<
  TData = Awaited<ReturnType<typeof getKeywordsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordsById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordsById>>,
          TError,
          Awaited<ReturnType<typeof getKeywordsById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetKeywordsById<
  TData = Awaited<ReturnType<typeof getKeywordsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordsById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetKeywordsById<
  TData = Awaited<ReturnType<typeof getKeywordsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getKeywordsById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetKeywordsByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putKeywordsById = (
  id: string,
  putKeywordsByIdBody:
    | PutKeywordsByIdBodyOne
    | PutKeywordsByIdBodyTwo
    | PutKeywordsByIdBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.put(
    `http://localhost:7000/keywords/${id}`,
    putKeywordsByIdBody,
    options,
  );
};

export const getPutKeywordsByIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putKeywordsById>>,
    TError,
    {
      id: string;
      data:
        | PutKeywordsByIdBodyOne
        | PutKeywordsByIdBodyTwo
        | PutKeywordsByIdBodyThree;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putKeywordsById>>,
  TError,
  {
    id: string;
    data: PutKeywordsByIdBodyOne | PutKeywordsByIdBodyTwo | PutKeywordsByIdBodyThree;
  },
  TContext
> => {
  const mutationKey = ['putKeywordsById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putKeywordsById>>,
    {
      id: string;
      data:
        | PutKeywordsByIdBodyOne
        | PutKeywordsByIdBodyTwo
        | PutKeywordsByIdBodyThree;
    }
  > = (props) => {
    const { id, data } = props ?? {};

    return putKeywordsById(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutKeywordsByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putKeywordsById>>
>;
export type PutKeywordsByIdMutationBody =
  | PutKeywordsByIdBodyOne
  | PutKeywordsByIdBodyTwo
  | PutKeywordsByIdBodyThree;
export type PutKeywordsByIdMutationError = AxiosError<unknown>;

export const usePutKeywordsById = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putKeywordsById>>,
      TError,
      {
        id: string;
        data:
          | PutKeywordsByIdBodyOne
          | PutKeywordsByIdBodyTwo
          | PutKeywordsByIdBodyThree;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putKeywordsById>>,
  TError,
  {
    id: string;
    data: PutKeywordsByIdBodyOne | PutKeywordsByIdBodyTwo | PutKeywordsByIdBodyThree;
  },
  TContext
> => {
  const mutationOptions = getPutKeywordsByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteKeywordsById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.delete(`http://localhost:7000/keywords/${id}`, options);
};

export const getDeleteKeywordsByIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteKeywordsById>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteKeywordsById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteKeywordsById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteKeywordsById>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteKeywordsById(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteKeywordsByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteKeywordsById>>
>;

export type DeleteKeywordsByIdMutationError = AxiosError<unknown>;

export const useDeleteKeywordsById = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteKeywordsById>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteKeywordsById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteKeywordsByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
