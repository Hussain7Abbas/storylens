/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elysia Documentation
 * Development documentation
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  DeleteKeywordsChaptersById200,
  DeleteKeywordsChaptersById404,
  DeleteKeywordsChaptersById500,
  GetKeywordsChaptersById200,
  GetKeywordsChaptersById404,
  GetKeywordsChaptersById500,
  GetKeywordsChaptersChapterByChapterId200,
  GetKeywordsChaptersChapterByChapterId404,
  GetKeywordsChaptersChapterByChapterId500,
  GetKeywordsChaptersChapterByChapterIdParams,
  GetKeywordsChaptersKeywordByKeywordId200,
  GetKeywordsChaptersKeywordByKeywordId404,
  GetKeywordsChaptersKeywordByKeywordId500,
  GetKeywordsChaptersKeywordByKeywordIdParams,
  PostKeywordsChapters200,
  PostKeywordsChapters404,
  PostKeywordsChapters500,
  PostKeywordsChaptersBodyOne,
  PostKeywordsChaptersBodyThree,
  PostKeywordsChaptersBodyTwo,
} from '../schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getKeywordsChaptersChapterByChapterId = (
  chapterId: string,
  params: GetKeywordsChaptersChapterByChapterIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetKeywordsChaptersChapterByChapterId200>> => {
  return axios.get(`http://localhost:7000/keywords-chapters/chapter/${chapterId}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetKeywordsChaptersChapterByChapterIdQueryKey = (
  chapterId?: string,
  params?: GetKeywordsChaptersChapterByChapterIdParams,
) => {
  return [
    `http://localhost:7000/keywords-chapters/chapter/${chapterId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetKeywordsChaptersChapterByChapterIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
  TError = AxiosError<
    | GetKeywordsChaptersChapterByChapterId404
    | GetKeywordsChaptersChapterByChapterId500
  >,
>(
  chapterId: string,
  params: GetKeywordsChaptersChapterByChapterIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetKeywordsChaptersChapterByChapterIdQueryKey(chapterId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>
  > = ({ signal }) =>
    getKeywordsChaptersChapterByChapterId(chapterId, params, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!chapterId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetKeywordsChaptersChapterByChapterIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>
>;
export type GetKeywordsChaptersChapterByChapterIdQueryError = AxiosError<
  GetKeywordsChaptersChapterByChapterId404 | GetKeywordsChaptersChapterByChapterId500
>;

export function useGetKeywordsChaptersChapterByChapterId<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
  TError = AxiosError<
    | GetKeywordsChaptersChapterByChapterId404
    | GetKeywordsChaptersChapterByChapterId500
  >,
>(
  chapterId: string,
  params: GetKeywordsChaptersChapterByChapterIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
          TError,
          Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKeywordsChaptersChapterByChapterId<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
  TError = AxiosError<
    | GetKeywordsChaptersChapterByChapterId404
    | GetKeywordsChaptersChapterByChapterId500
  >,
>(
  chapterId: string,
  params: GetKeywordsChaptersChapterByChapterIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
          TError,
          Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetKeywordsChaptersChapterByChapterId<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
  TError = AxiosError<
    | GetKeywordsChaptersChapterByChapterId404
    | GetKeywordsChaptersChapterByChapterId500
  >,
>(
  chapterId: string,
  params: GetKeywordsChaptersChapterByChapterIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetKeywordsChaptersChapterByChapterId<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
  TError = AxiosError<
    | GetKeywordsChaptersChapterByChapterId404
    | GetKeywordsChaptersChapterByChapterId500
  >,
>(
  chapterId: string,
  params: GetKeywordsChaptersChapterByChapterIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersChapterByChapterId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetKeywordsChaptersChapterByChapterIdQueryOptions(
    chapterId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getKeywordsChaptersKeywordByKeywordId = (
  keywordId: string,
  params: GetKeywordsChaptersKeywordByKeywordIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetKeywordsChaptersKeywordByKeywordId200>> => {
  return axios.get(`http://localhost:7000/keywords-chapters/keyword/${keywordId}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetKeywordsChaptersKeywordByKeywordIdQueryKey = (
  keywordId?: string,
  params?: GetKeywordsChaptersKeywordByKeywordIdParams,
) => {
  return [
    `http://localhost:7000/keywords-chapters/keyword/${keywordId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetKeywordsChaptersKeywordByKeywordIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
  TError = AxiosError<
    | GetKeywordsChaptersKeywordByKeywordId404
    | GetKeywordsChaptersKeywordByKeywordId500
  >,
>(
  keywordId: string,
  params: GetKeywordsChaptersKeywordByKeywordIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetKeywordsChaptersKeywordByKeywordIdQueryKey(keywordId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>
  > = ({ signal }) =>
    getKeywordsChaptersKeywordByKeywordId(keywordId, params, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!keywordId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetKeywordsChaptersKeywordByKeywordIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>
>;
export type GetKeywordsChaptersKeywordByKeywordIdQueryError = AxiosError<
  GetKeywordsChaptersKeywordByKeywordId404 | GetKeywordsChaptersKeywordByKeywordId500
>;

export function useGetKeywordsChaptersKeywordByKeywordId<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
  TError = AxiosError<
    | GetKeywordsChaptersKeywordByKeywordId404
    | GetKeywordsChaptersKeywordByKeywordId500
  >,
>(
  keywordId: string,
  params: GetKeywordsChaptersKeywordByKeywordIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
          TError,
          Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKeywordsChaptersKeywordByKeywordId<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
  TError = AxiosError<
    | GetKeywordsChaptersKeywordByKeywordId404
    | GetKeywordsChaptersKeywordByKeywordId500
  >,
>(
  keywordId: string,
  params: GetKeywordsChaptersKeywordByKeywordIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
          TError,
          Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetKeywordsChaptersKeywordByKeywordId<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
  TError = AxiosError<
    | GetKeywordsChaptersKeywordByKeywordId404
    | GetKeywordsChaptersKeywordByKeywordId500
  >,
>(
  keywordId: string,
  params: GetKeywordsChaptersKeywordByKeywordIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetKeywordsChaptersKeywordByKeywordId<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
  TError = AxiosError<
    | GetKeywordsChaptersKeywordByKeywordId404
    | GetKeywordsChaptersKeywordByKeywordId500
  >,
>(
  keywordId: string,
  params: GetKeywordsChaptersKeywordByKeywordIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersKeywordByKeywordId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetKeywordsChaptersKeywordByKeywordIdQueryOptions(
    keywordId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getKeywordsChaptersById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetKeywordsChaptersById200>> => {
  return axios.get(`http://localhost:7000/keywords-chapters/${id}`, options);
};

export const getGetKeywordsChaptersByIdQueryKey = (id?: string) => {
  return [`http://localhost:7000/keywords-chapters/${id}`] as const;
};

export const getGetKeywordsChaptersByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getKeywordsChaptersById>>,
  TError = AxiosError<GetKeywordsChaptersById404 | GetKeywordsChaptersById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersById>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetKeywordsChaptersByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getKeywordsChaptersById>>
  > = ({ signal }) => getKeywordsChaptersById(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getKeywordsChaptersById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetKeywordsChaptersByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKeywordsChaptersById>>
>;
export type GetKeywordsChaptersByIdQueryError = AxiosError<
  GetKeywordsChaptersById404 | GetKeywordsChaptersById500
>;

export function useGetKeywordsChaptersById<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersById>>,
  TError = AxiosError<GetKeywordsChaptersById404 | GetKeywordsChaptersById500>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordsChaptersById>>,
          TError,
          Awaited<ReturnType<typeof getKeywordsChaptersById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKeywordsChaptersById<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersById>>,
  TError = AxiosError<GetKeywordsChaptersById404 | GetKeywordsChaptersById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordsChaptersById>>,
          TError,
          Awaited<ReturnType<typeof getKeywordsChaptersById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetKeywordsChaptersById<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersById>>,
  TError = AxiosError<GetKeywordsChaptersById404 | GetKeywordsChaptersById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersById>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetKeywordsChaptersById<
  TData = Awaited<ReturnType<typeof getKeywordsChaptersById>>,
  TError = AxiosError<GetKeywordsChaptersById404 | GetKeywordsChaptersById500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKeywordsChaptersById>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetKeywordsChaptersByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteKeywordsChaptersById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DeleteKeywordsChaptersById200>> => {
  return axios.delete(`http://localhost:7000/keywords-chapters/${id}`, options);
};

export const getDeleteKeywordsChaptersByIdMutationOptions = <
  TError = AxiosError<DeleteKeywordsChaptersById404 | DeleteKeywordsChaptersById500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteKeywordsChaptersById>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteKeywordsChaptersById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteKeywordsChaptersById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteKeywordsChaptersById>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteKeywordsChaptersById(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteKeywordsChaptersByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteKeywordsChaptersById>>
>;

export type DeleteKeywordsChaptersByIdMutationError = AxiosError<
  DeleteKeywordsChaptersById404 | DeleteKeywordsChaptersById500
>;

export const useDeleteKeywordsChaptersById = <
  TError = AxiosError<DeleteKeywordsChaptersById404 | DeleteKeywordsChaptersById500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteKeywordsChaptersById>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteKeywordsChaptersById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteKeywordsChaptersByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postKeywordsChapters = (
  postKeywordsChaptersBody:
    | PostKeywordsChaptersBodyOne
    | PostKeywordsChaptersBodyTwo
    | PostKeywordsChaptersBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostKeywordsChapters200>> => {
  return axios.post(
    'http://localhost:7000/keywords-chapters/',
    postKeywordsChaptersBody,
    options,
  );
};

export const getPostKeywordsChaptersMutationOptions = <
  TError = AxiosError<PostKeywordsChapters404 | PostKeywordsChapters500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postKeywordsChapters>>,
    TError,
    {
      data:
        | PostKeywordsChaptersBodyOne
        | PostKeywordsChaptersBodyTwo
        | PostKeywordsChaptersBodyThree;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postKeywordsChapters>>,
  TError,
  {
    data:
      | PostKeywordsChaptersBodyOne
      | PostKeywordsChaptersBodyTwo
      | PostKeywordsChaptersBodyThree;
  },
  TContext
> => {
  const mutationKey = ['postKeywordsChapters'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postKeywordsChapters>>,
    {
      data:
        | PostKeywordsChaptersBodyOne
        | PostKeywordsChaptersBodyTwo
        | PostKeywordsChaptersBodyThree;
    }
  > = (props) => {
    const { data } = props ?? {};

    return postKeywordsChapters(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostKeywordsChaptersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postKeywordsChapters>>
>;
export type PostKeywordsChaptersMutationBody =
  | PostKeywordsChaptersBodyOne
  | PostKeywordsChaptersBodyTwo
  | PostKeywordsChaptersBodyThree;
export type PostKeywordsChaptersMutationError = AxiosError<
  PostKeywordsChapters404 | PostKeywordsChapters500
>;

export const usePostKeywordsChapters = <
  TError = AxiosError<PostKeywordsChapters404 | PostKeywordsChapters500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postKeywordsChapters>>,
      TError,
      {
        data:
          | PostKeywordsChaptersBodyOne
          | PostKeywordsChaptersBodyTwo
          | PostKeywordsChaptersBodyThree;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postKeywordsChapters>>,
  TError,
  {
    data:
      | PostKeywordsChaptersBodyOne
      | PostKeywordsChaptersBodyTwo
      | PostKeywordsChaptersBodyThree;
  },
  TContext
> => {
  const mutationOptions = getPostKeywordsChaptersMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
