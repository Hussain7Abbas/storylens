/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elysia Documentation
 * Development documentation
 * OpenAPI spec version: 0.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type { GetIndex404, GetIndex500 } from '../schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getIndex = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get('http://localhost:7000/', options);
};

export const getGetIndexQueryKey = () => {
  return ['http://localhost:7000/'] as const;
};

export const getGetIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof getIndex>>,
  TError = AxiosError<GetIndex404 | GetIndex500>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getIndex>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIndexQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndex>>> = ({ signal }) =>
    getIndex({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getIndex>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetIndexQueryResult = NonNullable<Awaited<ReturnType<typeof getIndex>>>;
export type GetIndexQueryError = AxiosError<GetIndex404 | GetIndex500>;

export function useGetIndex<
  TData = Awaited<ReturnType<typeof getIndex>>,
  TError = AxiosError<GetIndex404 | GetIndex500>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getIndex>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndex>>,
          TError,
          Awaited<ReturnType<typeof getIndex>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetIndex<
  TData = Awaited<ReturnType<typeof getIndex>>,
  TError = AxiosError<GetIndex404 | GetIndex500>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getIndex>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndex>>,
          TError,
          Awaited<ReturnType<typeof getIndex>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetIndex<
  TData = Awaited<ReturnType<typeof getIndex>>,
  TError = AxiosError<GetIndex404 | GetIndex500>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getIndex>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetIndex<
  TData = Awaited<ReturnType<typeof getIndex>>,
  TError = AxiosError<GetIndex404 | GetIndex500>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getIndex>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetIndexQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
