/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elysia Documentation
 * Development documentation
 * OpenAPI spec version: 0.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  PostFilesUploadBodyOne,
  PostFilesUploadBodyThree,
  PostFilesUploadBodyTwo,
} from '../schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const postFilesUpload = (
  postFilesUploadBody:
    | PostFilesUploadBodyOne
    | PostFilesUploadBodyTwo
    | PostFilesUploadBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    'http://localhost:7000/files/upload',
    postFilesUploadBody,
    options,
  );
};

export const getPostFilesUploadMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFilesUpload>>,
    TError,
    {
      data:
        | PostFilesUploadBodyOne
        | PostFilesUploadBodyTwo
        | PostFilesUploadBodyThree;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postFilesUpload>>,
  TError,
  {
    data: PostFilesUploadBodyOne | PostFilesUploadBodyTwo | PostFilesUploadBodyThree;
  },
  TContext
> => {
  const mutationKey = ['postFilesUpload'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postFilesUpload>>,
    {
      data:
        | PostFilesUploadBodyOne
        | PostFilesUploadBodyTwo
        | PostFilesUploadBodyThree;
    }
  > = (props) => {
    const { data } = props ?? {};

    return postFilesUpload(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostFilesUploadMutationResult = NonNullable<
  Awaited<ReturnType<typeof postFilesUpload>>
>;
export type PostFilesUploadMutationBody =
  | PostFilesUploadBodyOne
  | PostFilesUploadBodyTwo
  | PostFilesUploadBodyThree;
export type PostFilesUploadMutationError = AxiosError<unknown>;

export const usePostFilesUpload = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postFilesUpload>>,
      TError,
      {
        data:
          | PostFilesUploadBodyOne
          | PostFilesUploadBodyTwo
          | PostFilesUploadBodyThree;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postFilesUpload>>,
  TError,
  {
    data: PostFilesUploadBodyOne | PostFilesUploadBodyTwo | PostFilesUploadBodyThree;
  },
  TContext
> => {
  const mutationOptions = getPostFilesUploadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
