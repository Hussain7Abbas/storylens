/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elysia Documentation
 * Development documentation
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  GetChaptersNovelByNovelIdParams,
  PostChaptersBodyOne,
  PostChaptersBodyThree,
  PostChaptersBodyTwo,
  PutChaptersByIdBodyOne,
  PutChaptersByIdBodyThree,
  PutChaptersByIdBodyTwo,
} from '../schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getChaptersNovelByNovelId = (
  novelId: string,
  params: GetChaptersNovelByNovelIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`http://localhost:7000/chapters/novel/${novelId}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetChaptersNovelByNovelIdQueryKey = (
  novelId?: string,
  params?: GetChaptersNovelByNovelIdParams,
) => {
  return [
    `http://localhost:7000/chapters/novel/${novelId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetChaptersNovelByNovelIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
  TError = AxiosError<unknown>,
>(
  novelId: string,
  params: GetChaptersNovelByNovelIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetChaptersNovelByNovelIdQueryKey(novelId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getChaptersNovelByNovelId>>
  > = ({ signal }) =>
    getChaptersNovelByNovelId(novelId, params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!novelId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChaptersNovelByNovelIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getChaptersNovelByNovelId>>
>;
export type GetChaptersNovelByNovelIdQueryError = AxiosError<unknown>;

export function useGetChaptersNovelByNovelId<
  TData = Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
  TError = AxiosError<unknown>,
>(
  novelId: string,
  params: GetChaptersNovelByNovelIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
          TError,
          Awaited<ReturnType<typeof getChaptersNovelByNovelId>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChaptersNovelByNovelId<
  TData = Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
  TError = AxiosError<unknown>,
>(
  novelId: string,
  params: GetChaptersNovelByNovelIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
          TError,
          Awaited<ReturnType<typeof getChaptersNovelByNovelId>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetChaptersNovelByNovelId<
  TData = Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
  TError = AxiosError<unknown>,
>(
  novelId: string,
  params: GetChaptersNovelByNovelIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetChaptersNovelByNovelId<
  TData = Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
  TError = AxiosError<unknown>,
>(
  novelId: string,
  params: GetChaptersNovelByNovelIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getChaptersNovelByNovelId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetChaptersNovelByNovelIdQueryOptions(
    novelId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getChaptersById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`http://localhost:7000/chapters/${id}`, options);
};

export const getGetChaptersByIdQueryKey = (id?: string) => {
  return [`http://localhost:7000/chapters/${id}`] as const;
};

export const getGetChaptersByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getChaptersById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getChaptersById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChaptersByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChaptersById>>> = ({
    signal,
  }) => getChaptersById(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getChaptersById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChaptersByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getChaptersById>>
>;
export type GetChaptersByIdQueryError = AxiosError<unknown>;

export function useGetChaptersById<
  TData = Awaited<ReturnType<typeof getChaptersById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getChaptersById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChaptersById>>,
          TError,
          Awaited<ReturnType<typeof getChaptersById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChaptersById<
  TData = Awaited<ReturnType<typeof getChaptersById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getChaptersById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChaptersById>>,
          TError,
          Awaited<ReturnType<typeof getChaptersById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetChaptersById<
  TData = Awaited<ReturnType<typeof getChaptersById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getChaptersById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetChaptersById<
  TData = Awaited<ReturnType<typeof getChaptersById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getChaptersById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetChaptersByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putChaptersById = (
  id: string,
  putChaptersByIdBody:
    | PutChaptersByIdBodyOne
    | PutChaptersByIdBodyTwo
    | PutChaptersByIdBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.put(
    `http://localhost:7000/chapters/${id}`,
    putChaptersByIdBody,
    options,
  );
};

export const getPutChaptersByIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putChaptersById>>,
    TError,
    {
      id: string;
      data:
        | PutChaptersByIdBodyOne
        | PutChaptersByIdBodyTwo
        | PutChaptersByIdBodyThree;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putChaptersById>>,
  TError,
  {
    id: string;
    data: PutChaptersByIdBodyOne | PutChaptersByIdBodyTwo | PutChaptersByIdBodyThree;
  },
  TContext
> => {
  const mutationKey = ['putChaptersById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putChaptersById>>,
    {
      id: string;
      data:
        | PutChaptersByIdBodyOne
        | PutChaptersByIdBodyTwo
        | PutChaptersByIdBodyThree;
    }
  > = (props) => {
    const { id, data } = props ?? {};

    return putChaptersById(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutChaptersByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putChaptersById>>
>;
export type PutChaptersByIdMutationBody =
  | PutChaptersByIdBodyOne
  | PutChaptersByIdBodyTwo
  | PutChaptersByIdBodyThree;
export type PutChaptersByIdMutationError = AxiosError<unknown>;

export const usePutChaptersById = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putChaptersById>>,
      TError,
      {
        id: string;
        data:
          | PutChaptersByIdBodyOne
          | PutChaptersByIdBodyTwo
          | PutChaptersByIdBodyThree;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putChaptersById>>,
  TError,
  {
    id: string;
    data: PutChaptersByIdBodyOne | PutChaptersByIdBodyTwo | PutChaptersByIdBodyThree;
  },
  TContext
> => {
  const mutationOptions = getPutChaptersByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteChaptersById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.delete(`http://localhost:7000/chapters/${id}`, options);
};

export const getDeleteChaptersByIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteChaptersById>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteChaptersById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteChaptersById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteChaptersById>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteChaptersById(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteChaptersByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteChaptersById>>
>;

export type DeleteChaptersByIdMutationError = AxiosError<unknown>;

export const useDeleteChaptersById = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteChaptersById>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteChaptersById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteChaptersByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postChapters = (
  postChaptersBody: PostChaptersBodyOne | PostChaptersBodyTwo | PostChaptersBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post('http://localhost:7000/chapters/', postChaptersBody, options);
};

export const getPostChaptersMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postChapters>>,
    TError,
    { data: PostChaptersBodyOne | PostChaptersBodyTwo | PostChaptersBodyThree },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postChapters>>,
  TError,
  { data: PostChaptersBodyOne | PostChaptersBodyTwo | PostChaptersBodyThree },
  TContext
> => {
  const mutationKey = ['postChapters'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postChapters>>,
    { data: PostChaptersBodyOne | PostChaptersBodyTwo | PostChaptersBodyThree }
  > = (props) => {
    const { data } = props ?? {};

    return postChapters(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostChaptersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postChapters>>
>;
export type PostChaptersMutationBody =
  | PostChaptersBodyOne
  | PostChaptersBodyTwo
  | PostChaptersBodyThree;
export type PostChaptersMutationError = AxiosError<unknown>;

export const usePostChapters = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postChapters>>,
      TError,
      { data: PostChaptersBodyOne | PostChaptersBodyTwo | PostChaptersBodyThree },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postChapters>>,
  TError,
  { data: PostChaptersBodyOne | PostChaptersBodyTwo | PostChaptersBodyThree },
  TContext
> => {
  const mutationOptions = getPostChaptersMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
