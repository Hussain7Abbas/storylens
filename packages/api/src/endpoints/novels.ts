/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elysia Documentation
 * Development documentation
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  GetNovelsParams,
  PostNovelsBodyOne,
  PostNovelsBodyThree,
  PostNovelsBodyTwo,
  PutNovelsByIdBodyOne,
  PutNovelsByIdBodyThree,
  PutNovelsByIdBodyTwo,
} from '../schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getNovels = (
  params?: GetNovelsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get('http://localhost:7000/novels/', {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetNovelsQueryKey = (params?: GetNovelsParams) => {
  return ['http://localhost:7000/novels/', ...(params ? [params] : [])] as const;
};

export const getGetNovelsQueryOptions = <
  TData = Awaited<ReturnType<typeof getNovels>>,
  TError = AxiosError<unknown>,
>(
  params?: GetNovelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNovels>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNovelsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNovels>>> = ({
    signal,
  }) => getNovels(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNovels>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNovelsQueryResult = NonNullable<Awaited<ReturnType<typeof getNovels>>>;
export type GetNovelsQueryError = AxiosError<unknown>;

export function useGetNovels<
  TData = Awaited<ReturnType<typeof getNovels>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetNovelsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNovels>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNovels>>,
          TError,
          Awaited<ReturnType<typeof getNovels>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNovels<
  TData = Awaited<ReturnType<typeof getNovels>>,
  TError = AxiosError<unknown>,
>(
  params?: GetNovelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNovels>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNovels>>,
          TError,
          Awaited<ReturnType<typeof getNovels>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetNovels<
  TData = Awaited<ReturnType<typeof getNovels>>,
  TError = AxiosError<unknown>,
>(
  params?: GetNovelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNovels>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetNovels<
  TData = Awaited<ReturnType<typeof getNovels>>,
  TError = AxiosError<unknown>,
>(
  params?: GetNovelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNovels>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetNovelsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postNovels = (
  postNovelsBody: PostNovelsBodyOne | PostNovelsBodyTwo | PostNovelsBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post('http://localhost:7000/novels/', postNovelsBody, options);
};

export const getPostNovelsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNovels>>,
    TError,
    { data: PostNovelsBodyOne | PostNovelsBodyTwo | PostNovelsBodyThree },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postNovels>>,
  TError,
  { data: PostNovelsBodyOne | PostNovelsBodyTwo | PostNovelsBodyThree },
  TContext
> => {
  const mutationKey = ['postNovels'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postNovels>>,
    { data: PostNovelsBodyOne | PostNovelsBodyTwo | PostNovelsBodyThree }
  > = (props) => {
    const { data } = props ?? {};

    return postNovels(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostNovelsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postNovels>>
>;
export type PostNovelsMutationBody =
  | PostNovelsBodyOne
  | PostNovelsBodyTwo
  | PostNovelsBodyThree;
export type PostNovelsMutationError = AxiosError<unknown>;

export const usePostNovels = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postNovels>>,
      TError,
      { data: PostNovelsBodyOne | PostNovelsBodyTwo | PostNovelsBodyThree },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postNovels>>,
  TError,
  { data: PostNovelsBodyOne | PostNovelsBodyTwo | PostNovelsBodyThree },
  TContext
> => {
  const mutationOptions = getPostNovelsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getNovelsById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`http://localhost:7000/novels/${id}`, options);
};

export const getGetNovelsByIdQueryKey = (id?: string) => {
  return [`http://localhost:7000/novels/${id}`] as const;
};

export const getGetNovelsByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getNovelsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNovelsById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNovelsByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNovelsById>>> = ({
    signal,
  }) => getNovelsById(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNovelsById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNovelsByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNovelsById>>
>;
export type GetNovelsByIdQueryError = AxiosError<unknown>;

export function useGetNovelsById<
  TData = Awaited<ReturnType<typeof getNovelsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNovelsById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNovelsById>>,
          TError,
          Awaited<ReturnType<typeof getNovelsById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNovelsById<
  TData = Awaited<ReturnType<typeof getNovelsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNovelsById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNovelsById>>,
          TError,
          Awaited<ReturnType<typeof getNovelsById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetNovelsById<
  TData = Awaited<ReturnType<typeof getNovelsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNovelsById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetNovelsById<
  TData = Awaited<ReturnType<typeof getNovelsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNovelsById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetNovelsByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putNovelsById = (
  id: string,
  putNovelsByIdBody:
    | PutNovelsByIdBodyOne
    | PutNovelsByIdBodyTwo
    | PutNovelsByIdBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.put(`http://localhost:7000/novels/${id}`, putNovelsByIdBody, options);
};

export const getPutNovelsByIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNovelsById>>,
    TError,
    {
      id: string;
      data: PutNovelsByIdBodyOne | PutNovelsByIdBodyTwo | PutNovelsByIdBodyThree;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putNovelsById>>,
  TError,
  {
    id: string;
    data: PutNovelsByIdBodyOne | PutNovelsByIdBodyTwo | PutNovelsByIdBodyThree;
  },
  TContext
> => {
  const mutationKey = ['putNovelsById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putNovelsById>>,
    {
      id: string;
      data: PutNovelsByIdBodyOne | PutNovelsByIdBodyTwo | PutNovelsByIdBodyThree;
    }
  > = (props) => {
    const { id, data } = props ?? {};

    return putNovelsById(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutNovelsByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putNovelsById>>
>;
export type PutNovelsByIdMutationBody =
  | PutNovelsByIdBodyOne
  | PutNovelsByIdBodyTwo
  | PutNovelsByIdBodyThree;
export type PutNovelsByIdMutationError = AxiosError<unknown>;

export const usePutNovelsById = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putNovelsById>>,
      TError,
      {
        id: string;
        data: PutNovelsByIdBodyOne | PutNovelsByIdBodyTwo | PutNovelsByIdBodyThree;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putNovelsById>>,
  TError,
  {
    id: string;
    data: PutNovelsByIdBodyOne | PutNovelsByIdBodyTwo | PutNovelsByIdBodyThree;
  },
  TContext
> => {
  const mutationOptions = getPutNovelsByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteNovelsById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.delete(`http://localhost:7000/novels/${id}`, options);
};

export const getDeleteNovelsByIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNovelsById>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNovelsById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteNovelsById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteNovelsById>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteNovelsById(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNovelsByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteNovelsById>>
>;

export type DeleteNovelsByIdMutationError = AxiosError<unknown>;

export const useDeleteNovelsById = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteNovelsById>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteNovelsById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteNovelsByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
