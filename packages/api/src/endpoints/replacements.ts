/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elysia Documentation
 * Development documentation
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  GetReplacementsKeywordByKeywordIdParams,
  PostReplacementsBodyOne,
  PostReplacementsBodyThree,
  PostReplacementsBodyTwo,
  PutReplacementsByIdBodyOne,
  PutReplacementsByIdBodyThree,
  PutReplacementsByIdBodyTwo,
} from '../schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getReplacementsKeywordByKeywordId = (
  keywordId: string,
  params: GetReplacementsKeywordByKeywordIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`http://localhost:7000/replacements/keyword/${keywordId}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetReplacementsKeywordByKeywordIdQueryKey = (
  keywordId?: string,
  params?: GetReplacementsKeywordByKeywordIdParams,
) => {
  return [
    `http://localhost:7000/replacements/keyword/${keywordId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetReplacementsKeywordByKeywordIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
  TError = AxiosError<unknown>,
>(
  keywordId: string,
  params: GetReplacementsKeywordByKeywordIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetReplacementsKeywordByKeywordIdQueryKey(keywordId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>
  > = ({ signal }) =>
    getReplacementsKeywordByKeywordId(keywordId, params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!keywordId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetReplacementsKeywordByKeywordIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>
>;
export type GetReplacementsKeywordByKeywordIdQueryError = AxiosError<unknown>;

export function useGetReplacementsKeywordByKeywordId<
  TData = Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
  TError = AxiosError<unknown>,
>(
  keywordId: string,
  params: GetReplacementsKeywordByKeywordIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
          TError,
          Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReplacementsKeywordByKeywordId<
  TData = Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
  TError = AxiosError<unknown>,
>(
  keywordId: string,
  params: GetReplacementsKeywordByKeywordIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
          TError,
          Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetReplacementsKeywordByKeywordId<
  TData = Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
  TError = AxiosError<unknown>,
>(
  keywordId: string,
  params: GetReplacementsKeywordByKeywordIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetReplacementsKeywordByKeywordId<
  TData = Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
  TError = AxiosError<unknown>,
>(
  keywordId: string,
  params: GetReplacementsKeywordByKeywordIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReplacementsKeywordByKeywordId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetReplacementsKeywordByKeywordIdQueryOptions(
    keywordId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getReplacementsById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`http://localhost:7000/replacements/${id}`, options);
};

export const getGetReplacementsByIdQueryKey = (id?: string) => {
  return [`http://localhost:7000/replacements/${id}`] as const;
};

export const getGetReplacementsByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getReplacementsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReplacementsById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetReplacementsByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getReplacementsById>>> = ({
    signal,
  }) => getReplacementsById(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getReplacementsById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetReplacementsByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReplacementsById>>
>;
export type GetReplacementsByIdQueryError = AxiosError<unknown>;

export function useGetReplacementsById<
  TData = Awaited<ReturnType<typeof getReplacementsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReplacementsById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReplacementsById>>,
          TError,
          Awaited<ReturnType<typeof getReplacementsById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReplacementsById<
  TData = Awaited<ReturnType<typeof getReplacementsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReplacementsById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReplacementsById>>,
          TError,
          Awaited<ReturnType<typeof getReplacementsById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetReplacementsById<
  TData = Awaited<ReturnType<typeof getReplacementsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReplacementsById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetReplacementsById<
  TData = Awaited<ReturnType<typeof getReplacementsById>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReplacementsById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetReplacementsByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putReplacementsById = (
  id: string,
  putReplacementsByIdBody:
    | PutReplacementsByIdBodyOne
    | PutReplacementsByIdBodyTwo
    | PutReplacementsByIdBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.put(
    `http://localhost:7000/replacements/${id}`,
    putReplacementsByIdBody,
    options,
  );
};

export const getPutReplacementsByIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putReplacementsById>>,
    TError,
    {
      id: string;
      data:
        | PutReplacementsByIdBodyOne
        | PutReplacementsByIdBodyTwo
        | PutReplacementsByIdBodyThree;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putReplacementsById>>,
  TError,
  {
    id: string;
    data:
      | PutReplacementsByIdBodyOne
      | PutReplacementsByIdBodyTwo
      | PutReplacementsByIdBodyThree;
  },
  TContext
> => {
  const mutationKey = ['putReplacementsById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putReplacementsById>>,
    {
      id: string;
      data:
        | PutReplacementsByIdBodyOne
        | PutReplacementsByIdBodyTwo
        | PutReplacementsByIdBodyThree;
    }
  > = (props) => {
    const { id, data } = props ?? {};

    return putReplacementsById(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutReplacementsByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putReplacementsById>>
>;
export type PutReplacementsByIdMutationBody =
  | PutReplacementsByIdBodyOne
  | PutReplacementsByIdBodyTwo
  | PutReplacementsByIdBodyThree;
export type PutReplacementsByIdMutationError = AxiosError<unknown>;

export const usePutReplacementsById = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putReplacementsById>>,
      TError,
      {
        id: string;
        data:
          | PutReplacementsByIdBodyOne
          | PutReplacementsByIdBodyTwo
          | PutReplacementsByIdBodyThree;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putReplacementsById>>,
  TError,
  {
    id: string;
    data:
      | PutReplacementsByIdBodyOne
      | PutReplacementsByIdBodyTwo
      | PutReplacementsByIdBodyThree;
  },
  TContext
> => {
  const mutationOptions = getPutReplacementsByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteReplacementsById = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.delete(`http://localhost:7000/replacements/${id}`, options);
};

export const getDeleteReplacementsByIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteReplacementsById>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteReplacementsById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteReplacementsById'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteReplacementsById>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteReplacementsById(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteReplacementsByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteReplacementsById>>
>;

export type DeleteReplacementsByIdMutationError = AxiosError<unknown>;

export const useDeleteReplacementsById = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteReplacementsById>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteReplacementsById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteReplacementsByIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postReplacements = (
  postReplacementsBody:
    | PostReplacementsBodyOne
    | PostReplacementsBodyTwo
    | PostReplacementsBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.post(
    'http://localhost:7000/replacements/',
    postReplacementsBody,
    options,
  );
};

export const getPostReplacementsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postReplacements>>,
    TError,
    {
      data:
        | PostReplacementsBodyOne
        | PostReplacementsBodyTwo
        | PostReplacementsBodyThree;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postReplacements>>,
  TError,
  {
    data:
      | PostReplacementsBodyOne
      | PostReplacementsBodyTwo
      | PostReplacementsBodyThree;
  },
  TContext
> => {
  const mutationKey = ['postReplacements'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postReplacements>>,
    {
      data:
        | PostReplacementsBodyOne
        | PostReplacementsBodyTwo
        | PostReplacementsBodyThree;
    }
  > = (props) => {
    const { data } = props ?? {};

    return postReplacements(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostReplacementsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postReplacements>>
>;
export type PostReplacementsMutationBody =
  | PostReplacementsBodyOne
  | PostReplacementsBodyTwo
  | PostReplacementsBodyThree;
export type PostReplacementsMutationError = AxiosError<unknown>;

export const usePostReplacements = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postReplacements>>,
      TError,
      {
        data:
          | PostReplacementsBodyOne
          | PostReplacementsBodyTwo
          | PostReplacementsBodyThree;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postReplacements>>,
  TError,
  {
    data:
      | PostReplacementsBodyOne
      | PostReplacementsBodyTwo
      | PostReplacementsBodyThree;
  },
  TContext
> => {
  const mutationOptions = getPostReplacementsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
