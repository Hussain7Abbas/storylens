/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elysia Documentation
 * Development documentation
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  DeleteConfigsByKey200,
  DeleteConfigsByKey404,
  DeleteConfigsByKey500,
  GetConfigs200,
  GetConfigs404,
  GetConfigs500,
  GetConfigsByKey200,
  GetConfigsByKey404,
  GetConfigsByKey500,
  PutConfigs200,
  PutConfigs404,
  PutConfigs500,
  PutConfigsBodyOne,
  PutConfigsBodyThree,
  PutConfigsBodyTwo,
} from '../schemas';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getConfigs = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetConfigs200>> => {
  return axios.get('http://localhost:7000/configs/', options);
};

export const getGetConfigsQueryKey = () => {
  return ['http://localhost:7000/configs/'] as const;
};

export const getGetConfigsQueryOptions = <
  TData = Awaited<ReturnType<typeof getConfigs>>,
  TError = AxiosError<GetConfigs404 | GetConfigs500>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getConfigs>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConfigsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConfigs>>> = ({
    signal,
  }) => getConfigs({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getConfigs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConfigsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConfigs>>
>;
export type GetConfigsQueryError = AxiosError<GetConfigs404 | GetConfigs500>;

export function useGetConfigs<
  TData = Awaited<ReturnType<typeof getConfigs>>,
  TError = AxiosError<GetConfigs404 | GetConfigs500>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConfigs>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfigs>>,
          TError,
          Awaited<ReturnType<typeof getConfigs>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConfigs<
  TData = Awaited<ReturnType<typeof getConfigs>>,
  TError = AxiosError<GetConfigs404 | GetConfigs500>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConfigs>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfigs>>,
          TError,
          Awaited<ReturnType<typeof getConfigs>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetConfigs<
  TData = Awaited<ReturnType<typeof getConfigs>>,
  TError = AxiosError<GetConfigs404 | GetConfigs500>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConfigs>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetConfigs<
  TData = Awaited<ReturnType<typeof getConfigs>>,
  TError = AxiosError<GetConfigs404 | GetConfigs500>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConfigs>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetConfigsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putConfigs = (
  putConfigsBody: PutConfigsBodyOne | PutConfigsBodyTwo | PutConfigsBodyThree,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PutConfigs200>> => {
  return axios.put('http://localhost:7000/configs/', putConfigsBody, options);
};

export const getPutConfigsMutationOptions = <
  TError = AxiosError<PutConfigs404 | PutConfigs500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putConfigs>>,
    TError,
    { data: PutConfigsBodyOne | PutConfigsBodyTwo | PutConfigsBodyThree },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putConfigs>>,
  TError,
  { data: PutConfigsBodyOne | PutConfigsBodyTwo | PutConfigsBodyThree },
  TContext
> => {
  const mutationKey = ['putConfigs'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putConfigs>>,
    { data: PutConfigsBodyOne | PutConfigsBodyTwo | PutConfigsBodyThree }
  > = (props) => {
    const { data } = props ?? {};

    return putConfigs(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutConfigsMutationResult = NonNullable<
  Awaited<ReturnType<typeof putConfigs>>
>;
export type PutConfigsMutationBody =
  | PutConfigsBodyOne
  | PutConfigsBodyTwo
  | PutConfigsBodyThree;
export type PutConfigsMutationError = AxiosError<PutConfigs404 | PutConfigs500>;

export const usePutConfigs = <
  TError = AxiosError<PutConfigs404 | PutConfigs500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putConfigs>>,
      TError,
      { data: PutConfigsBodyOne | PutConfigsBodyTwo | PutConfigsBodyThree },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putConfigs>>,
  TError,
  { data: PutConfigsBodyOne | PutConfigsBodyTwo | PutConfigsBodyThree },
  TContext
> => {
  const mutationOptions = getPutConfigsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getConfigsByKey = (
  key: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetConfigsByKey200>> => {
  return axios.get(`http://localhost:7000/configs/${key}`, options);
};

export const getGetConfigsByKeyQueryKey = (key?: string) => {
  return [`http://localhost:7000/configs/${key}`] as const;
};

export const getGetConfigsByKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getConfigsByKey>>,
  TError = AxiosError<GetConfigsByKey404 | GetConfigsByKey500>,
>(
  key: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConfigsByKey>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConfigsByKeyQueryKey(key);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConfigsByKey>>> = ({
    signal,
  }) => getConfigsByKey(key, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!key, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getConfigsByKey>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConfigsByKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConfigsByKey>>
>;
export type GetConfigsByKeyQueryError = AxiosError<
  GetConfigsByKey404 | GetConfigsByKey500
>;

export function useGetConfigsByKey<
  TData = Awaited<ReturnType<typeof getConfigsByKey>>,
  TError = AxiosError<GetConfigsByKey404 | GetConfigsByKey500>,
>(
  key: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConfigsByKey>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfigsByKey>>,
          TError,
          Awaited<ReturnType<typeof getConfigsByKey>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConfigsByKey<
  TData = Awaited<ReturnType<typeof getConfigsByKey>>,
  TError = AxiosError<GetConfigsByKey404 | GetConfigsByKey500>,
>(
  key: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConfigsByKey>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConfigsByKey>>,
          TError,
          Awaited<ReturnType<typeof getConfigsByKey>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetConfigsByKey<
  TData = Awaited<ReturnType<typeof getConfigsByKey>>,
  TError = AxiosError<GetConfigsByKey404 | GetConfigsByKey500>,
>(
  key: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConfigsByKey>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetConfigsByKey<
  TData = Awaited<ReturnType<typeof getConfigsByKey>>,
  TError = AxiosError<GetConfigsByKey404 | GetConfigsByKey500>,
>(
  key: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConfigsByKey>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetConfigsByKeyQueryOptions(key, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteConfigsByKey = (
  key: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DeleteConfigsByKey200>> => {
  return axios.delete(`http://localhost:7000/configs/${key}`, options);
};

export const getDeleteConfigsByKeyMutationOptions = <
  TError = AxiosError<DeleteConfigsByKey404 | DeleteConfigsByKey500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteConfigsByKey>>,
    TError,
    { key: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteConfigsByKey>>,
  TError,
  { key: string },
  TContext
> => {
  const mutationKey = ['deleteConfigsByKey'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteConfigsByKey>>,
    { key: string }
  > = (props) => {
    const { key } = props ?? {};

    return deleteConfigsByKey(key, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteConfigsByKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteConfigsByKey>>
>;

export type DeleteConfigsByKeyMutationError = AxiosError<
  DeleteConfigsByKey404 | DeleteConfigsByKey500
>;

export const useDeleteConfigsByKey = <
  TError = AxiosError<DeleteConfigsByKey404 | DeleteConfigsByKey500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteConfigsByKey>>,
      TError,
      { key: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteConfigsByKey>>,
  TError,
  { key: string },
  TContext
> => {
  const mutationOptions = getDeleteConfigsByKeyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
